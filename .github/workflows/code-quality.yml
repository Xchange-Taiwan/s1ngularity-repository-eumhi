name: Code Quality Check

on:
  pull_request:
    branches: ['**']

permissions:
  contents: write # 讓 GITHUB_TOKEN 能夠 push（同 repo PR 才用得到）
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Format and Lint Check

    steps:
      - name: Checkout code (PR head branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # 重要：檢出 PR 來源的 head 分支，而不是 refs/pull/.../merge（避免 detached HEAD 造成 push 困難）
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Check Prettier formatting
        id: prettier-check
        run: |
          if ! pnpm run format:check; then
            echo "formatting_needed=true" >> $GITHUB_OUTPUT
            echo "❌ Code formatting issues detected"
          else
            echo "formatting_needed=false" >> $GITHUB_OUTPUT
            echo "✅ Code is properly formatted"
          fi

      - name: Run Prettier (auto-fix)
        if: steps.prettier-check.outputs.formatting_needed == 'true'
        run: pnpm run format

      - name: Run ESLint
        id: eslint-check
        run: |
          if ! pnpm run lint; then
            echo "❌ ESLint errors detected, attempting auto-fix..."
            pnpm run lint:fix
            if ! pnpm run lint; then
              echo "❌ Unfixable ESLint errors remain"
              echo "lint_failed=true" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "✅ ESLint errors fixed automatically"
              echo "lint_fixed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ No ESLint errors detected"
            echo "lint_fixed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        id: git-check
        run: |
          if git diff --quiet; then
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "✅ No formatting or linting changes needed"
          else
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "📝 Formatting or linting changes detected"
          fi

      - name: Configure Git
        # 僅在有變更、且 PR 不是 main/master、且 PR 來源與目標在同一個 repo 時才設定（fork 沒權限）
        if: |
          steps.git-check.outputs.changes_made == 'true' &&
          github.ref != 'refs/heads/main' &&
          github.ref != 'refs/heads/master' &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        # 關鍵：在 detached HEAD 也能推，用 HEAD:<branch> 明確指定目標分支
        if: |
          steps.git-check.outputs.changes_made == 'true' &&
          github.ref != 'refs/heads/main' &&
          github.ref != 'refs/heads/master' &&
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git add -A
          git commit -m "🔧 Auto-fix: Format code and fix linting issues

          - Applied Prettier formatting
          - Fixed auto-fixable ESLint issues

          [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}

      - name: Notify about fork PR (no auto-commit)
        if: |
          steps.git-check.outputs.changes_made == 'true' &&
          github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "⚠️  This is a forked PR. Auto-commit is disabled for security/permission reasons."
          echo "Please run 'pnpm run format && pnpm run lint:fix' locally and push the changes."

      - name: Notify about main/master branch
        if: |
          steps.git-check.outputs.changes_made == 'true' &&
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "⚠️  Formatting/linting issues detected on main/master branch."
          echo "Auto-commit is disabled for main/master branches."
          echo "Please run 'pnpm run format && pnpm run lint:fix' locally and commit the changes."
          exit 1

      - name: Summary
        if: always()
        run: |
          echo "## Code Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.prettier-check.outputs.formatting_needed }}" == "true" ]]; then
            echo "| Prettier | 🔧 Fixed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Prettier | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ steps.eslint-check.outputs.lint_failed }}" == "true" ]]; then
            echo "| ESLint | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.eslint-check.outputs.lint_fixed }}" == "true" ]]; then
            echo "| ESLint | 🔧 Fixed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ steps.git-check.outputs.changes_made }}" == "true" ]]; then
            if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
              echo "| Auto-commit | ⚠️ Skipped (fork) |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo "| Auto-commit | ⚠️ Skipped (main/master) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Auto-commit | ✅ Applied |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Auto-commit | ➖ Not needed |" >> $GITHUB_STEP_SUMMARY
          fi
